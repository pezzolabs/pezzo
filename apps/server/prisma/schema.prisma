// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  engineType    = "binary"
}

generator nestgraphql {
  provider      = "node node_modules/prisma-nestjs-graphql"
  output        = "../src/@generated"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
  purgeOutput   = true

  // PromptService
  fields_PromptService_from        = "../../app/prompts/models/prompt-version-service.enum"
  fields_PromptService_input       = true
  fields_PromptService_models      = true
  fields_PromptService_output      = true
  fields_PromptService_namedImport = true

  // ExtendedUser
  fields_ExtendedUser_from        = "../../app/identity/models/extended-user.model"
  fields_ExtendedUser_input       = false
  fields_ExtendedUser_models      = true
  fields_ExtendedUser_output      = true
  fields_ExtendedUser_namedImport = true
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model PromptVersion {
  sha                String              @id
  type               PromptType          @default(Prompt)
  /// @FieldType('PromptService')
  /// @PropertyType('PromptService')
  service            String
  settings           Json                @default("{}")
  content            Json
  promptId           String
  prompt             Prompt              @relation(fields: [promptId], references: [id], onDelete: Cascade)
  createdAt          DateTime            @default(now())
  promptEnvironments PromptEnvironment[]
  message            String?
  createdById        String
  /// @FieldType('ExtendedUser')
  /// @PropertyType('ExtendedUser')
  createdBy          User                @relation(fields: [createdById], references: [id])
}

model User {
  id                    String               @id
  email                 String               @unique
  createdAt             DateTime?            @default(now())
  updatedAt             DateTime?            @updatedAt
  orgMemberships        OrganizationMember[]
  publishedPrompts      PromptEnvironment[]
  createdPromptVersions PromptVersion[]
  sentInvitations       Invitation[]
}

model Project {
  id             String       @id @default(cuid())
  slug           String
  name           String
  organization   Organization @relation(fields: [organizationId], references: [id])
  organizationId String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Organization {
  id              String               @id @default(cuid())
  name            String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  members         OrganizationMember[]
  projects        Project[]
  apiKeys         ApiKey[]
  providerApiKeys ProviderApiKey[]
  invitations     Invitation[]
  waitlisted      Boolean              @default(false)
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           OrgRole      @default(Admin)
  organization   Organization @relation(fields: [organizationId], references: [id])
  /// @FieldType('ExtendedUser')
  /// @PropertyType('ExtendedUser')
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

model Invitation {
  id             String           @id @default(cuid())
  email          String
  role           OrgRole
  status         InvitationStatus
  createdAt      DateTime         @default(now())
  organizationId String
  organization   Organization     @relation(fields: [organizationId], references: [id])
  invitedById    String
  /// @FieldType('ExtendedUser')
  /// @PropertyType('ExtendedUser')
  invitedBy      User             @relation(fields: [invitedById], references: [id])
}

enum InvitationStatus {
  Pending
  Accepted
}

enum OrgRole {
  Admin
  Member
}

model Environment {
  id                 String              @id @default(cuid())
  name               String
  projectId          String
  promptEnvironments PromptEnvironment[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model ApiKey {
  id             String       @id
  name           String       @default("Default")
  organizationId String
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
}

enum PromptType {
  Prompt
  Chat
}

model Prompt {
  id                 String              @id @default(cuid())
  projectId          String
  name               String
  promptEnvironments PromptEnvironment[]
  versions           PromptVersion[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model PromptEnvironment {
  id               String         @id @default(cuid())
  promptId         String
  environmentId    String
  createdAt        DateTime       @default(now())
  prompt           Prompt         @relation(fields: [promptId], references: [id], onDelete: Cascade)
  promptVersionSha String
  promptVersion    PromptVersion? @relation(fields: [promptVersionSha], references: [sha])
  environment      Environment    @relation(fields: [environmentId], references: [id], onDelete: Cascade)
  publishedById    String
  publishedBy      User           @relation(fields: [publishedById], references: [id])
}

model ProviderApiKey {
  id               String       @id @default(cuid())
  /// @HideField({ input: true, output: true })
  encryptedData    String
  /// @HideField({ input: true, output: true })
  encryptedDataKey String
  censoredValue    String
  provider         String
  organizationId   String
  organization     Organization @relation(fields: [organizationId], references: [id])
  createdAt        DateTime     @default(now())
  updatedAt        DateTime     @updatedAt
}
