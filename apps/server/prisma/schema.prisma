// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "debian-openssl-1.1.x"]
  engineType    = "binary"
}

generator nestgraphql {
  provider      = "node node_modules/prisma-nestjs-graphql"
  output        = "../src/@generated"
  binaryTargets = ["native", "debian-openssl-1.1.x", "linux-arm64-openssl-1.1.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                    String               @id
  email                 String               @unique
  createdAt             DateTime             @default(now())
  updatedAt             DateTime             @updatedAt
  orgMemberships        OrganizationMember[]
  projectMemberships    ProjectMember[]
  publishedPrompts      PromptEnvironment[]
  createdPromptVersions PromptVersion[]
}

model Project {
  id              String           @id @default(cuid())
  slug            String
  name            String
  organization    Organization     @relation(fields: [organizationId], references: [id])
  organizationId  String
  providerApiKeys ProviderApiKey[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  members         ProjectMember[]
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  project   Project  @relation(fields: [projectId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Organization {
  id        String               @id @default(cuid())
  name      String
  createdAt DateTime             @default(now())
  updatedAt DateTime             @updatedAt
  members   OrganizationMember[]
  projects  Project[]
}

model OrganizationMember {
  id             String       @id @default(cuid())
  organizationId String
  userId         String
  role           OrgRole      @default(Admin)
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum OrgRole {
  Admin
}

model Environment {
  id                 String              @id @default(cuid())
  name               String
  projectId          String
  promptEnvironments PromptEnvironment[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
  apiKeys            ApiKey[]
}

model ApiKey {
  id            String   @id
  name          String   @default("Default")
  environmentId String
  environment   Environment  @relation(fields: [environmentId], references: [id])
  createdAt     DateTime @default(now())
}

model Prompt {
  id                 String              @id @default(cuid())
  integrationId      String
  projectId          String
  name               String
  executions         PromptExecution[]
  promptEnvironments PromptEnvironment[]
  versions           PromptVersion[]
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @updatedAt
}

model PromptVersion {
  sha                String              @id
  content            String
  settings           Json
  promptId           String
  prompt             Prompt              @relation(fields: [promptId], references: [id])
  createdAt          DateTime            @default(now())
  promptEnvironments PromptEnvironment[]
  message            String?
  createdById        String
  createdBy          User                @relation(fields: [createdById], references: [id])
}

model PromptEnvironment {
  id               String         @id @default(cuid())
  promptId         String
  environmentId    String
  createdAt        DateTime       @default(now())
  prompt           Prompt         @relation(fields: [promptId], references: [id])
  promptVersionSha String
  promptVersion    PromptVersion? @relation(fields: [promptVersionSha], references: [sha])
  environment      Environment    @relation(fields: [environmentId], references: [id])
  publishedById    String
  publishedBy      User           @relation(fields: [publishedById], references: [id])
}

model PromptExecution {
  id                  String                @id @default(cuid())
  prompt              Prompt                @relation(fields: [promptId], references: [id])
  promptId            String
  promptVersionSha    String
  timestamp           DateTime              @default(now())
  status              PromptExecutionStatus
  content             String
  interpolatedContent String
  settings            Json
  result              String?
  duration            Int
  promptTokens        Int
  completionTokens    Int
  totalTokens         Int
  promptCost          Float
  completionCost      Float
  totalCost           Float
  error               String?
  variables           Json                  @default("{}")
}

enum PromptExecutionStatus {
  Success
  Error
}

model ProviderApiKey {
  id        String   @id @default(cuid())
  provider  String
  value     String
  projectId String
  project   Project  @relation(fields: [projectId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
